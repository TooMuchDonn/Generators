'use strict'

const switcher = document.querySelector('.theme');
const generateButton = document.getElementById("btnGenerate");
const debugButton = document.getElementById("debug");
const debugLable = document.getElementById("debugLabel");
let debug = false;
const specialButton = document.getElementById("special");
const numberField = document.getElementById("number");
const lgbtqiaField = document.getElementById("lgbtqiaPercent");
const straight = 0;
const gay = 1;
const bisexual = 2;
const ace = 3;
const queer = 4;
const int_altruism      = 0 ;
const int_lawfulness    = 1 ;
const int_honor         = 2 ;
const int_introversion  = 3 ;
const int_creativity    = 4 ;
const int_loyalty       = 5 ;
const int_optimism      = 6 ;
const int_intelligence  = 7 ;
const int_attractiveness= 8 ;
const int_fortitude     = 9 ;
const int_wisdom        = 10;
const int_charisma      = 11;
const int_strength      = 12;
const int_dexterity     = 13;
const int_agility       = 14;
const int_sanity        = 15;
const int_willpower     = 16;
const int_religiousness = 17;
const int_pride         = 18
const int_wrath         = 19
const int_lust          = 20
const int_gluttony      = 21
const int_envy          = 22
const int_sloth         = 23


function random(max, min){
    return Math.floor(Math.random() * (max - min + 1) + min);
}

function randomArrayIndex(length){
    return Math.floor(Math.random() * (length));
}

function getLGBTQIAPercent(){
    return lgbtqiaField.value;
}

function bellCurveTraitGeneration(){// 66% of values generated by this function will have an absolute value <=33, 33% will have an absolute value >= 33
    let first = random(100, -100);
    let second = random(100, -100);
    let third = random(100, -100);
    let value = Math.round((first + second + third) / 3);
    return value;
}

const listFears = ["Abandonment", "Amnesia", "Becoming their parents", "Bees", "Being a bad person", "Being alone", "Being electrocuted", "Being stereotypical", "Being touched", "Being Underground",
                "Being unwanted", "Blood", "Bugs", "Cats", "Change", "Clowns", "Commitment", "Corpses", "Crashing", "Crowds",
                "Death", "Dentists", "Doctors", "Dogs", "Driving", "Engulfment", "Failure", "Falling", "Feeling trapped", "Fire",
                "Flying", "Germs", "Getting Lost", "Getting Older", "Ghosts", "God/gods/Deities", "Guns", "Heights", "Hospitals", "Intimacy",
                "Leadership", "Losing Loved Ones", "Mascots", "Monsters", "Needles", "Old People", "Open Spaces", "Pain", "Power", "Public Speaking",
                "Rain", "Rats", "Rejection", "Scary Movies", "Sick People", "Slow Death", "Small Spaces", "Snakes", "Spiders", "The Dark",
                "The Outdoors", "The Unknown", "Themselves", "Thunder", "Violence", "Water", "Drowning", "Social Situations", "Agoraphobia"];


const listMundaneFlaws = ["Acts Superior", "Angsty", "Assertive", "Attitude", "Avoids their problems", "Big mouth", "Blames others", "Bossy", "Careless",
                "Chatter-box", "Closed off", "Cocky", "Cold", "Competitive", "Conceited", "Controlling", "Cunning", "Cynical",
                "Deceptive", "Defiant", "Disrespectful", "Distracted Easily", "Forgetful", "Greedy", "Holds Grudges", "Hostile", "Immature", "Impatient",
                "Impractical", "Impressionable", "Impulsive", "Inconsiderate", "Liar", "Loud", "Manipulative",
                "Messy", "Mischievious", "Naive", "Nosy", "Obnoxious", "Offended Easily", "Outsider", "Overdramatic", "Over emotional", "Over reacts",
                "Player", "Poser", "Pretentious", "Pushy", "Pyromaniac", "Rash", "Reckless", "Rude",
                "Sarcastic", "Secretive", "Sensitive", "Shy", "Smart ass", "Sneaky", "Sore Loser", "Irrational", "Spoiled", "Stereotypical",
                "Stubborn", "Superstitious", "Temper", "Thoughtless", "Trust Issues", "Undependable", "Unorganized", "Unreasonable", "Unstable Relationships", "Unsympathetic",
                "Vain", "Vengeful", "Violent", "Wasteful", "Whiney", "Wrathful", "Sexist"];
//const listRebelFlaws = ["Anarchist", "Kleptomaniac", "Rebellious", "Thief"];
//const listEvilFlaws = ["Abusive", "Cruel", "Dictator", "Evil", "Ruthless", "Sadistic", "Uses Others", "Egotistical", "Mean", "Selfish", "Traitor"];

const listHabits = ["Analyzing others", "Apologizing", "Asking a lot of questions", "Avoiding gazes", "Biting", "Chewing their lip", "Chewing their nails", "Cleaning", "Daydreaming", "Doodling",
                "Drinking", "Eating with their mouth open", "Fiddling with jewelry", "Flinching", "Flirting", "Hair chewing", "Humming", "Knuckle cracking", "Laughing when lying", "Listening to music while sleeping",
                "Looking for an easy way out", "Lying", "Making a mess", "Messing with their hair", "Mumbling", "Over Eating", "Overspending while shopping", "Overworking", "Pacing", "Peeling scabs",
                "Procrastinating", "Rambling", "Using filler language", "Scratching", "Separating things into groups", "Showing off", "Sleeping late", "Speaking loudly", "Speaking softly", "Sticking their tongue out",
                "Stuttering", "Sucking on their thumb", "Switching between dialects", "Talking in 3rd person", "Talking in their sleep", "Tapping", "Telling the truth", "Underworking", "Using old sayings/proverbs", "Using jargon",
                "Waking up early", "Writing notes"];

const listHobbies = ["Acting", "Archaeology", "Archery", "Architecture", "Art", "Crafts", "Astronomy", "Backpacking", "Playing an instrument", "Sport",
                "Fauna watching", "Flora investigating", "Camping", "Sailing", "Playing cards", "Carving", "Chemistry", "Chess", "Cleaning", "Collecting",
                "Computers/Logic", "Cooking", "Dancing", "Decorating", "Design", "Dioramas", "Doing Good", "Drinking", "Driving", "Eating",
                "Exploring", "Spending time with loved ones", "Special", "Local customs", "Fashion", "Fireworks", "Lighting fires", "Fishing", "Gambling", "Gardening",
                "High-class sporting", "Hiking", "Hunting", "Jewelry Making", "Knitting", "Listening to music", "Metal work", "Modeling", "Organizing", "Combat Training",
                "Party planning", "Photography/Painting", "Playing noncompetitive games", "Gambling", "Racing", "Reading", "Scrap Booking", "Sewing", "Shopping", "Singing",
                "Winter Sports", "Sleeping", "Studying", "Swimming", "Travling", "Board Games", "Cheap Entertainment", "Writing", "Yoga", "Martial Arts"];
/*
const listFears = ["", "", "", "", "", "", "", "", "", "",
                "", "", "", "", "", "", "", "", "", "",
                "", "", "", "", "", "", "", "", "", "",
                "", "", "", "", "", "", "", "", "", "",
                "", "", "", "", "", "", "", "", "", "",
                "", "", "", "", "", "", "", "", "", "",
                "", "", "", "", "", "", "", "", "", ""];
*/

class Character {
    constructor(num) {
        this.number                     = num;
        this.sex                        = random(2, 1);
        this.trans                      = false;
        this.sexuality                  = random(100, 0);
        this.physical                   = random(25, -25);
        this.altruism                   = random(100, -100);
        this.lawfulness                 = random(100, -100);
        this.honor                      = bellCurveTraitGeneration() + this.lawfulness/4;
        this.introversion               = bellCurveTraitGeneration();
        this.creativity                 = bellCurveTraitGeneration() - this.lawfulness/4;
        this.loyalty                    = bellCurveTraitGeneration() + this.honor/4 + this.altruism/4;
        this.optimism                   = bellCurveTraitGeneration();
        this.intelligence               = bellCurveTraitGeneration();
        this.attractiveness             = bellCurveTraitGeneration()+this.physical;
        this.fortitude                  = bellCurveTraitGeneration()+this.physical;
        this.wisdom                     = bellCurveTraitGeneration();
        this.charisma                   = bellCurveTraitGeneration()+this.attractiveness/4;
        this.strength                   = bellCurveTraitGeneration()+this.physical;
        this.dexterity                  = bellCurveTraitGeneration()+this.physical;
        this.agility                    = bellCurveTraitGeneration()+this.physical;
        this.sanity                     = bellCurveTraitGeneration();
        this.willpower                  = bellCurveTraitGeneration();
        this.religiousness              = bellCurveTraitGeneration();
        this.pride                      = bellCurveTraitGeneration() - this.altruism/4;
        this.wrath                      = bellCurveTraitGeneration() - this.willpower/4;
        this.lust                       = bellCurveTraitGeneration() - this.willpower/4;
        this.gluttony                   = bellCurveTraitGeneration() - this.willpower/4;
        this.envy                       = bellCurveTraitGeneration() - this.altruism/4;
        this.sloth                      = bellCurveTraitGeneration();
        this.fears                      = [];
        this.flaws                      = [];
        this.habits                     = [];
        this.hobbies                    = [];
        this.setFears();
        this.setFlaws();
        this.setHabits();
        this.setHobbies();
        
        if(random(100, 0)<2){
            this.trans = true;
        }
    }
    //#region Character Printout Debug Stuff
    getCharacterArray(){
        let array = [];
        array.push(this.number        ); 
        array.push(this.sex           ); 
        array.push(this.trans         ); 
        array.push(this.sexuality     ); 
        array.push(this.physical      ); 
        array.push(this.altruism      ); 
        array.push(this.lawfulness    ); 
        array.push(this.honor         ); 
        array.push(this.introversion  ); 
        array.push(this.creativity    ); 
        array.push(this.loyalty       ); 
        array.push(this.optimism      ); 
        array.push(this.intelligence  ); 
        array.push(this.attractiveness); 
        array.push(this.fortitude     ); 
        array.push(this.wisdom        ); 
        array.push(this.charisma      ); 
        array.push(this.strength      ); 
        array.push(this.dexterity     ); 
        array.push(this.agility       ); 
        array.push(this.sanity        ); 
        array.push(this.willpower     ); 
        array.push(this.religiousness ); 
        array.push(this.pride         ); 
        array.push(this.wrath         ); 
        array.push(this.lust          ); 
        array.push(this.gluttony      ); 
        array.push(this.envy          ); 
        array.push(this.sloth         ); 
        array.push(this.fears         ); 
        array.push(this.flaws         ); 
        array.push(this.habits        ); 
        array.push(this.hobbies       ); 
        return array;
    }
    getCharacterArrayDescription(){
        let array = [];
        array.push((" "+"number         ".trim()+": "));
        array.push((" "+"sex            ".trim()+": "));
        array.push((" "+"trans          ".trim()+": "));
        array.push((" "+"sexuality      ".trim()+": "));
        array.push((" "+"physical       ".trim()+": "));
        array.push((" "+"altruism       ".trim()+": "));
        array.push((" "+"lawfulness     ".trim()+": "));
        array.push((" "+"honor          ".trim()+": "));
        array.push((" "+"introversion   ".trim()+": "));
        array.push((" "+"creativity     ".trim()+": "));
        array.push((" "+"loyalty        ".trim()+": "));
        array.push((" "+"optimism       ".trim()+": "));
        array.push((" "+"intelligence   ".trim()+": "));
        array.push((" "+"attractiveness ".trim()+": "));
        array.push((" "+"fortitude      ".trim()+": "));
        array.push((" "+"wisdom         ".trim()+": "));
        array.push((" "+"charisma       ".trim()+": "));
        array.push((" "+"strength       ".trim()+": "));
        array.push((" "+"dexterity      ".trim()+": "));
        array.push((" "+"agility        ".trim()+": "));
        array.push((" "+"sanity         ".trim()+": "));
        array.push((" "+"willpower      ".trim()+": "));
        array.push((" "+"religiousness  ".trim()+": "));
        array.push((" "+"pride          ".trim()+": "));
        array.push((" "+"wrath          ".trim()+": "));
        array.push((" "+"lust           ".trim()+": "));
        array.push((" "+"gluttony       ".trim()+": "));
        array.push((" "+"envy           ".trim()+": "));
        array.push((" "+"sloth          ".trim()+": "));
        array.push((" "+"fears          ".trim()+": "));
        array.push((" "+"flaws          ".trim()+": "));
        array.push((" "+"habits         ".trim()+": "));
        array.push((" "+"hobbies        ".trim()+": "));
        return array;
    }
    //#endregion
    getCharacterDescription(){
        let description = "";
        description = description + "Character " + this.number;// + " has " + this.getNumberInterestingCharacteristics() + " interesting characteristics.";
        let simplicity = "";
        let iC = this.getNumberInterestingCharacteristics();
        if(iC<2){
            simplicity = "is a simple person. ";
            simplicity = simplicity + this.getCapitalizedPronoun() + " can be summed up by saying " + this.getPronoun() + " is " + " " + this.getDefiningCharacteristicAdj();
        }else if(iC>5){
            simplicity = "is a complicated individual. ";
            simplicity = simplicity + this.getCapitalizedPronoun() + " cannot be defined by any one thing, but " + this.getPronounPossessive() + " " + this.getDefiningCharacteristics() + " are most important to who " + this.getPronoun() + " " + this.getToBe();
        }else{
            simplicity = "has a few things that define them. "
            simplicity = simplicity + "Most important to " + this.getPronounPossessive() + " character are " + this.getPronounPossessive() + " " + this.getDefiningCharacteristics();
        }
        description = description + " " + simplicity + ".";
        let sinText = this.getCapitalizedPronoun() + " " + this.getToBe();
        if(this.altruism>33){
            sinText = sinText + " a good person, but " + this.getPronoun() + " nevertheless possesses some vices as well as virtues. ";
        }else if(this.altruism < -33){
            sinText = sinText + " a selfish person, which manifests in a number of vices which drive " + this.getPronounObject() + ". ";
        }else{
            sinText = sinText + " neither truly selfless nor selfish, but can be either according to the circumstances. However, " + this.getPronoun() + " does have character flaws which make " + this.getPronounObject() + " less than morally tepid. ";
        }
        let worstSinData = this.getWorstSin();
        sinText = sinText + "Foremost among these flaws is "+this.getPronounPossessive()+" " + this.getNounText(worstSinData[0]);
        if(worstSinData[1]>66){
            sinText = sinText + ". In fact, the depths to which this sin is entrenched within "+this.getPronounObject()+" place "+this.getPronounObject()+" among the worst in this aspect of anyone you will ever meet.";
        }else if(worstSinData[1]>33){
            sinText = sinText + ". This is a deep flaw on "+this.getPronounPossessive()+" character, defining much of "+this.getPronounPossessive()+" immoral or unethical behavior.";
        }else if(worstSinData[1]>0){
            sinText = sinText + ". "+this.getCapitalizedPronoun()+" " +this.getToBe()+ " not worse than the average person in this, but it is a solid flaw on "+this.getPronounPossessive()+" character.";
        }else{
            sinText = sinText + ". However, despite this being "+this.getPronounPossessive()+" worst vice, it is not so much a true vice as a lack of virtue. Really it's only remarkable because "+this.getPronoun()+" is so overflowing with virtues that the relative lack of this one is odd.";
        }  
        sinText = sinText + " "
             if(worstSinData[0]==int_pride    &&worstSinData[1]>0){sinText = sinText + this.getCapitalizedPronoun() + " always has a voice in the back of "+this.getPronounPossessive()+" head, whispering and telling "+this.getPronounObject()+" that "+this.getPronoun()+" is better than everyone else.";}
        else if(worstSinData[0]==int_wrath    &&worstSinData[1]>0){sinText = sinText + "Whether "+this.getPronoun()+" tries to control it or not, "+this.getPronoun()+" there's always a chance that something will set "+this.getPronounObject()+" off and cause "+this.getPronounObject()+" to lose "+this.getPronounPossessive()+" cool.";}
        else if(worstSinData[0]==int_lust     &&worstSinData[1]>0){sinText = sinText + "This places some strain on "+this.getPronounPossessive()+" relationships with everyone that "+this.getPronoun()+" " +this.getToBe()+ " attracted to and not in a relationship with. It also places strain on everyone that "+this.getPronoun()+" "+this.getToBe()+" in a relationship with, as "+this.getPronoun()+" struggles to control "+this.getPronounPossessive()+" urges.";}
        else if(worstSinData[0]==int_gluttony &&worstSinData[1]>0){sinText = sinText + this.getCapitalizedPronoun()+" has their appetites, and "+this.getPronounPossessive()+" behavior changes when "+this.getPronoun()+" has the opportunity to take more of that which "+this.getPronoun()+" desires.";}
        else if(worstSinData[0]==int_envy     &&worstSinData[1]>0){sinText = sinText + "It pains "+this.getPronounObject()+" when others have that which "+this.getPronoun()+" does not, or has it in greater measure.";}
        else if(worstSinData[0]==int_sloth    &&worstSinData[1]>0){sinText = sinText + this.getCapitalizedPronoun()+" is constantly handicapped by "+this.getPronounPossessive()+" own lack of drive. That's not to say "+this.getPronoun()+" doesn't possess drive, but that it is oftentimes difficult for "+this.getPronounObject()+" to gather the energy to do what "+this.getPronoun()+" want or need to do.";}
        else if(worstSinData[0]==int_loyalty  &&worstSinData[1]>0){sinText = sinText + this.getCapitalizedPronoun()+" feels less of the weight of the bonds which tie people together. If other aspects of "+this.getPronounPossessive()+" character drive it, "+this.getPronoun()+" would not hesitate to betray anyone.";}
        else if(worstSinData[0]==int_honor    &&worstSinData[1]>0){sinText = sinText + "Vows and the weight of "+this.getPronounPossessive()+" word do not weigh highly in "+this.getPronounPossessive()+" estimation. Any deal is subject to be broken regardless of the effect on "+this.getPronounPossessive()+" reputation.";}
        else if(worstSinData[0]==int_willpower&&worstSinData[1]>0){sinText = sinText + this.getCapitalizedPronoun()+" is not driven so much by a single vice, but rather by "+this.getPronounPossessive()+" inability to control "+this.getPronounReflexive()+". Willpower is not something that "+this.getPronoun()+" possesses in any great measure.";}
        sinText = sinText + " " + this.getSecondarySinsDescription(worstSinData)+".";
        description = description + " " + sinText;
        let virtueText = " "
        let bestVirtueData = this.getGreatestVirtue();
        if(bestVirtueData[1]>0){
            if(this.altruism>33){
                virtueText = virtueText + this.getCapitalizedPronoun() + " cares about other people, and tries to act selflessly when "+this.getPronoun()+" can. One of the ways in which "+this.getPronoun()+" does this best is through "+this.getPronounPossessive()+" "+this.getNounText(bestVirtueData[0]);
            }else if(this.altruism<-33){
                virtueText = virtueText + "Although "+this.getPronoun()+" may never be widely considered a saint, "+this.getPronoun()+" is notably "+this.getAdjText(bestVirtueData[0]);
            }else{
                virtueText = virtueText + this.getCapitalizedPronoun() + " has "+this.getPronounPossessive()+" shining qualities, and chief among them is "+this.getPronounPossessive()+" "+this.getNounText(bestVirtueData[0]);
            }
            virtueText = virtueText + ". ";
            if(bestVirtueData[1]>66){
                virtueText = virtueText + this.getCapitalizedPronoun() + " is an exemplar in this, truly one of the most " + this.getAdjText(bestVirtueData[0]) + " people around.";
            }else if(bestVirtueData[1]>33){
                virtueText = virtueText + this.getCapitalizedPronounPossessive() + " " + this.getNounText(bestVirtueData[0]) + " is evident to anyone who interacts with them.";
            }else{
                virtueText = virtueText + "Though in fact, "+this.getPronoun()+" is no more "+this.getAdjText(bestVirtueData[0])+" than the average person.";
            }
            virtueText = virtueText + " ";
                 if(bestVirtueData[0]==int_pride    &&bestVirtueData[1]>0){virtueText = virtueText + this.getCapitalizedPronoun() + " does not view themselves as better than others.";}
            else if(bestVirtueData[0]==int_wrath    &&bestVirtueData[1]>0){virtueText = virtueText + "Even in situations with heightened nerves, "+this.getPronoun()+" is able to keep "+this.getPronounPossessive()+" cool, rarely speaking or acting out of anger.";}
            else if(bestVirtueData[0]==int_lust     &&bestVirtueData[1]>0){virtueText = virtueText + "The charms of those "+this.getPronoun()+" "+this.getToBe()+" attracted to do not dictate "+this.getPronounPossessive()+" actions. "+this.getCapitalizedPronoun()+" "+this.getToBe()+" in control of "+this.getPronounPossessive()+" passions, through and through.";}
            else if(bestVirtueData[0]==int_gluttony &&bestVirtueData[1]>0){virtueText = virtueText + this.getCapitalizedPronoun()+" is content with what "+this.getPronoun()+" has, and is able to satisfy their desires without always wanting more.";}
            else if(bestVirtueData[0]==int_envy     &&bestVirtueData[1]>0){virtueText = virtueText + "The fortunes of others don't concern "+this.getPronounObject()+", and "+this.getPronoun()+" does not stress "+this.getPronounReflexive()+" if and when others possess things that they do not.";}
            else if(bestVirtueData[0]==int_sloth    &&bestVirtueData[1]>0){virtueText = virtueText + this.getCapitalizedPronoun()+" is hard-working, always putting in the work to achieve "+this.getPronounPossessive()+" goals.";}
            else if(bestVirtueData[0]==int_loyalty  &&bestVirtueData[1]>0){virtueText = virtueText + this.getCapitalizedPronounPossessive()+" trust, once won, is enduring. "+this.getCapitalizedPronoun()+" is a true companion, standing by their people through thick and thin.";}
            else if(bestVirtueData[0]==int_honor    &&bestVirtueData[1]>0){virtueText = virtueText + "Integrity is everything to "+this.getPronounObject()+", integrity and "+this.getPronounPossessive()+" word. If "+this.getPronoun()+" makes an agreement "+this.getPronoun()+" stands by that.";}
            else if(bestVirtueData[0]==int_willpower&&bestVirtueData[1]>0){virtueText = virtueText + this.getCapitalizedPronoun()+" believes that the mark of a great person is "+this.getPronounPossessive()+" ability to stick to "+this.getPronounPossessive()+" guns and remain true to "+this.getPronounPossessive()+" own mind.";}
            virtueText = virtueText + " ";
            virtueText = virtueText + this.getSecondaryVirtues(bestVirtueData)+".";
        }else{
            virtueText = virtueText + "Worst still, there is no quality about "+this.getPronounObject()+" that could be considered a true virtue. At best one could say that "+this.getPronoun()+" "+this.getToBe()+" "+this.getAdjText(bestVirtueData[1], true)+" but even this is a misnomer as "+this.getPronoun()+" "+this.getToBe()+"n't so much "+this.getAdjText(bestVirtueData[1], true)+" as "+this.getPronoun()+" "+this.getToBe()+" not as "+this.getAdjText(bestVirtueData[1])+" as "+this.getPronoun()+" could be.";
        }
        description = description + " " + virtueText;
        return description;
    }
    getNumberInterestingCharacteristics(){
        let count = 0;
        if(Math.abs(this.altruism      )>50){count++};
        if(Math.abs(this.lawfulness    )>50){count++};
        if(Math.abs(this.honor         )>50){count++};
        if(Math.abs(this.introversion  )>50){count++};
        if(Math.abs(this.creativity    )>50){count++};
        if(Math.abs(this.loyalty       )>50){count++};
        if(Math.abs(this.optimism      )>50){count++};
        if(Math.abs(this.intelligence  )>50){count++};
        if(Math.abs(this.attractiveness)>50){count++};
        if(Math.abs(this.fortitude     )>50){count++};
        if(Math.abs(this.wisdom        )>50){count++};
        if(Math.abs(this.charisma      )>50){count++};
        if(Math.abs(this.strength      )>50){count++};
        if(Math.abs(this.dexterity     )>50){count++};
        if(Math.abs(this.agility       )>50){count++};
        if(Math.abs(this.sanity        )>50){count++};
        if(Math.abs(this.willpower     )>50){count++};
        if(Math.abs(this.religiousness )>50){count++};
        if(Math.abs(this.pride         )>50){count++};
        if(Math.abs(this.wrath         )>50){count++};
        if(Math.abs(this.lust          )>50){count++};
        if(Math.abs(this.gluttony      )>50){count++};
        if(Math.abs(this.envy          )>50){count++};
        if(Math.abs(this.sloth         )>50){count++};
        return count;
    }
    getWorstSin(){
        let max = -100;
        let num = int_pride;
        if(this.pride       >max){max = this.pride       ; num = int_pride     ;}
        if(this.wrath       >max){max = this.wrath       ; num = int_wrath     ;}
        if(this.lust        >max){max = this.lust        ; num = int_lust      ;}
        if(this.gluttony    >max){max = this.gluttony    ; num = int_gluttony  ;}
        if(this.envy        >max){max = this.envy        ; num = int_envy      ;}
        if(this.sloth       >max){max = this.sloth       ; num = int_sloth     ;}
        if(this.loyalty*-1  >max){max = this.loyalty*-1  ; num = int_loyalty   ;}
        if(this.honor*-1    >max){max = this.honor*-1    ; num = int_honor     ;}
        if(this.willpower*-1>max){max = this.willpower*-1; num = int_willpower ;}
        return [num, max];
    }
    getSecondarySinsDescription(wSD){
        let sins = [];
        if(this.pride    >0&&wSD[0]!=int_pride    ){sins.push("proud")}
        if(this.wrath    >0&&wSD[0]!=int_wrath    ){sins.push("quick-tempered")}
        if(this.lust     >0&&wSD[0]!=int_lust     ){sins.push("lustful")}
        if(this.gluttony >0&&wSD[0]!=int_gluttony ){sins.push("greedy")}
        if(this.envy     >0&&wSD[0]!=int_envy     ){sins.push("envious")}
        if(this.sloth    >0&&wSD[0]!=int_sloth    ){sins.push("slothful")}
        if(this.loyalty  <0&&wSD[0]!=int_loyalty  ){sins.push("disloyal");}
        if(this.honor    <0&&wSD[0]!=int_honor    ){sins.push("dishonorable");}
        if(this.willpower<0&&wSD[0]!=int_willpower){sins.push("lacking self-control");}
        if(sins.length==0){
            return "";
        }else if(sins.length==1){
            return "In addition to "+this.getPronounPossessive()+" greater vice, "+this.getPronoun()+" can also be described as "+sins[0];
        }else if(sins.length==2){
            return "In addition to "+this.getPronounPossessive()+" greater vice, "+this.getPronoun()+" can also be described as "+sins[0]+" and "+sins[1];
        }else{
            let text = sins[0];
            for(let i = 1; i < sins.length-1; i++){
                text = text + ", " + sins[i];
            }
            text = text + ", and "+sins[sins.length-1];
            return "In addition to "+this.getPronounPossessive()+" greater vice, "+this.getPronoun()+" can also be described as "+text;
        }
    }
    getGreatestVirtue(){
        let max = -100;
        let num = int_pride;
        if(this.pride    *-1>max){max = this.pride    *-1; num = int_pride     ;}
        if(this.wrath    *-1>max){max = this.wrath    *-1; num = int_wrath     ;}
        if(this.lust     *-1>max){max = this.lust     *-1; num = int_lust      ;}
        if(this.gluttony *-1>max){max = this.gluttony *-1; num = int_gluttony  ;}
        if(this.envy     *-1>max){max = this.envy     *-1; num = int_envy      ;}
        if(this.sloth    *-1>max){max = this.sloth    *-1; num = int_sloth     ;}
        if(this.loyalty     >max){max = this.loyalty     ; num = int_loyalty   ;}
        if(this.honor       >max){max = this.honor       ; num = int_honor     ;}
        if(this.willpower   >max){max = this.willpower   ; num = int_willpower ;}
        return [num, max];
    }
    getSecondaryVirtues(wSD){
        let virtues = [];
        if(this.pride    <0&&wSD[0]!=int_pride    ){virtues.push("humble")}
        if(this.wrath    <0&&wSD[0]!=int_wrath    ){virtues.push("stoic")}
        if(this.lust     <0&&wSD[0]!=int_lust     ){virtues.push("chaste")}
        if(this.gluttony <0&&wSD[0]!=int_gluttony ){virtues.push("temperate")}
        if(this.envy     <0&&wSD[0]!=int_envy     ){virtues.push("content")}
        if(this.sloth    <0&&wSD[0]!=int_sloth    ){virtues.push("diligent")}
        if(this.loyalty  >0&&wSD[0]!=int_loyalty  ){virtues.push("loyal");}
        if(this.honor    >0&&wSD[0]!=int_honor    ){virtues.push("honorable");}
        if(this.willpower>0&&wSD[0]!=int_willpower){virtues.push("disciplined");}
        if(virtues.length==0){
            return "";
        }else if(virtues.length==1){
            return "In addition to "+this.getPronounPossessive()+" greater virtue, "+this.getPronoun()+" can also be described as "+virtues[0];
        }else if(virtues.length==2){
            return "In addition to "+this.getPronounPossessive()+" greater virtue, "+this.getPronoun()+" can also be described as "+virtues[0]+" and "+virtues[1];
        }else{
            let text = virtues[0];
            for(let i = 1; i < virtues.length-1; i++){
                text = text + ", " + virtues[i];
            }
            text = text + ", and "+virtues[virtues.length-1];
            return "In addition to "+this.getPronounPossessive()+" greater virtue, "+this.getPronoun()+" can also be described as "+text;
        }
    }
    //#region Get text words for nouns and adjectives related to character traits.
    getTextaltruism         (opposite = false){if((this.altruism      >=0)^(opposite)){return "altruism"      ;}else{return "selfishness"           ;}}
    getTextlawfulness       (opposite = false){if((this.lawfulness    >=0)^(opposite)){return "lawfulness"    ;}else{return "disregard for rules"   ;}}
    getTexthonor            (opposite = false){if((this.honor         >=0)^(opposite)){return "honor"         ;}else{return "lack of honor"         ;}}
    getTextintroversion     (opposite = false){if((this.introversion  >=0)^(opposite)){return "introversion"  ;}else{return "extroversion"          ;}}
    getTextcreativity       (opposite = false){if((this.creativity    >=0)^(opposite)){return "creativity"    ;}else{return "lack of imagination"   ;}}
    getTextloyalty          (opposite = false){if((this.loyalty       >=0)^(opposite)){return "loyalty"       ;}else{return "disloyalty"            ;}}
    getTextoptimism         (opposite = false){if((this.optimism      >=0)^(opposite)){return "optimism"      ;}else{return "pessimism"             ;}}
    getTextintelligence     (opposite = false){if((this.intelligence  >=0)^(opposite)){return "intelligence"  ;}else{return "lack of book smarts"    ;}}
    getTextattractiveness   (opposite = false){if((this.attractiveness>=0)^(opposite)){return "attractiveness";}else{return "ugliness"              ;}}
    getTextfortitude        (opposite = false){if((this.fortitude     >=0)^(opposite)){return "fortitude"     ;}else{return "fragility"             ;}}
    getTextwisdom           (opposite = false){if((this.wisdom        >=0)^(opposite)){return "wisdom"        ;}else{return "foolhardiness"         ;}}
    getTextcharisma         (opposite = false){if((this.charisma      >=0)^(opposite)){return "charisma"      ;}else{return "social ineptitude"     ;}}
    getTextstrength         (opposite = false){if((this.strength      >=0)^(opposite)){return "strength"      ;}else{return "weakness"              ;}}
    getTextdexterity        (opposite = false){if((this.dexterity     >=0)^(opposite)){return "dexterity"     ;}else{return "clumsiness"            ;}}
    getTextagility          (opposite = false){if((this.agility       >=0)^(opposite)){return "agility"       ;}else{return "gawkiness"             ;}}
    getTextsanity           (opposite = false){if((this.sanity        >=0)^(opposite)){return "sanity"        ;}else{return "insanity"              ;}}
    getTextwillpower        (opposite = false){if((this.willpower     >=0)^(opposite)){return "willpower"     ;}else{return "impulsivness"          ;}}
    getTextreligiousness    (opposite = false){if((this.religiousness >=0)^(opposite)){return "religiousness" ;}else{return "sacreligiousness"      ;}}
    getTextpride            (opposite = false){if((this.pride         >=0)^(opposite)){return "pride"         ;}else{return "humility"              ;}}
    getTextwrath            (opposite = false){if((this.wrath         >=0)^(opposite)){return "temper"        ;}else{return "stoicism"              ;}}
    getTextlust             (opposite = false){if((this.lust          >=0)^(opposite)){return "lust"          ;}else{return "chastity"              ;}}
    getTextgluttony         (opposite = false){if((this.gluttony      >=0)^(opposite)){return "greed"         ;}else{return "temperance"            ;}}
    getTextenvy             (opposite = false){if((this.envy          >=0)^(opposite)){return "jealousy"      ;}else{return "empathy"               ;}}
    getTextsloth            (opposite = false){if((this.sloth         >=0)^(opposite)){return "laziness"      ;}else{return "diligence"             ;}}

    getNounText(num, opposite = false){
        let text = "";
        switch(num){
            case int_altruism      : text = this.getTextaltruism        (opposite); break;
            case int_lawfulness    : text = this.getTextlawfulness      (opposite); break;
            case int_honor         : text = this.getTexthonor           (opposite); break;
            case int_introversion  : text = this.getTextintroversion    (opposite); break;
            case int_creativity    : text = this.getTextcreativity      (opposite); break;
            case int_loyalty       : text = this.getTextloyalty         (opposite); break;
            case int_optimism      : text = this.getTextoptimism        (opposite); break;
            case int_intelligence  : text = this.getTextintelligence    (opposite); break;
            case int_attractiveness: text = this.getTextattractiveness  (opposite); break;
            case int_fortitude     : text = this.getTextfortitude       (opposite); break;
            case int_wisdom        : text = this.getTextwisdom          (opposite); break;
            case int_charisma      : text = this.getTextcharisma        (opposite); break;
            case int_strength      : text = this.getTextstrength        (opposite); break;
            case int_dexterity     : text = this.getTextdexterity       (opposite); break;
            case int_agility       : text = this.getTextagility         (opposite); break;
            case int_sanity        : text = this.getTextsanity          (opposite); break;
            case int_willpower     : text = this.getTextwillpower       (opposite); break;
            case int_religiousness : text = this.getTextreligiousness   (opposite); break;
            case int_pride         : text = this.getTextpride           (opposite); break;
            case int_wrath         : text = this.getTextwrath           (opposite); break;
            case int_lust          : text = this.getTextlust            (opposite); break;
            case int_gluttony      : text = this.getTextgluttony        (opposite); break;
            case int_envy          : text = this.getTextenvy            (opposite); break;
            case int_sloth         : text = this.getTextsloth           (opposite); break;
        }
        return text;
    }
    getAdjTextaltruism      (opposite = false){if((this.altruism      >=0)^(opposite)){return "altruistic"    ;}else{return "selfish"               ;}}
    getAdjTextlawfulness    (opposite = false){if((this.lawfulness    >=0)^(opposite)){return "disciplined"   ;}else{return "rebellious"            ;}}
    getAdjTexthonor         (opposite = false){if((this.honor         >=0)^(opposite)){return "honorable"     ;}else{return "unprincipled"          ;}}
    getAdjTextintroversion  (opposite = false){if((this.introversion  >=0)^(opposite)){return "introverted"   ;}else{return "extroverted"           ;}}
    getAdjTextcreativity    (opposite = false){if((this.creativity    >=0)^(opposite)){return "creative"      ;}else{return "unimaginative"         ;}}
    getAdjTextloyalty       (opposite = false){if((this.loyalty       >=0)^(opposite)){return "loyal"         ;}else{return "unreliable"            ;}}
    getAdjTextoptimism      (opposite = false){if((this.optimism      >=0)^(opposite)){return "optimistic"    ;}else{return "pessimistic"           ;}}
    getAdjTextintelligence  (opposite = false){if((this.intelligence  >=0)^(opposite)){return "brilliant"     ;}else{return "unlearned"             ;}}
    getAdjTextattractiveness(opposite = false){if((this.attractiveness>=0)^(opposite)){return "attractive"    ;}else{return "ugly"                  ;}}
    getAdjTextfortitude     (opposite = false){if((this.fortitude     >=0)^(opposite)){return "durable"       ;}else{return "delicate"              ;}}
    getAdjTextwisdom        (opposite = false){if((this.wisdom        >=0)^(opposite)){return "wise"          ;}else{return "foolish"               ;}}
    getAdjTextcharisma      (opposite = false){if((this.charisma      >=0)^(opposite)){return "charming"      ;}else{return "brusque"               ;}}
    getAdjTextstrength      (opposite = false){if((this.strength      >=0)^(opposite)){return "powerful"      ;}else{return "feeble"                ;}}
    getAdjTextdexterity     (opposite = false){if((this.dexterity     >=0)^(opposite)){return "deft"          ;}else{return "clumsy"                ;}}
    getAdjTextagility       (opposite = false){if((this.agility       >=0)^(opposite)){return "nimble"        ;}else{return "stiff"                 ;}}
    getAdjTextsanity        (opposite = false){if((this.sanity        >=0)^(opposite)){return "stable"        ;}else{return "mad"                   ;}}
    getAdjTextwillpower     (opposite = false){if((this.willpower     >=0)^(opposite)){return "tenacious"     ;}else{return "irresolute"            ;}}
    getAdjTextreligiousness (opposite = false){if((this.religiousness >=0)^(opposite)){return "devout"        ;}else{return "irreverent"            ;}}
    getAdjTextpride         (opposite = false){if((this.pride         >=0)^(opposite)){return "proud"         ;}else{return "humble"                ;}}
    getAdjTextwrath         (opposite = false){if((this.wrath         >=0)^(opposite)){return "quick-tempered";}else{return "even-tempered"         ;}}
    getAdjTextlust          (opposite = false){if((this.lust          >=0)^(opposite)){return "lustful"       ;}else{return "chaste"                ;}}
    getAdjTextgluttony      (opposite = false){if((this.gluttony      >=0)^(opposite)){return "greedy"        ;}else{return "moderate"              ;}}
    getAdjTextenvy          (opposite = false){if((this.envy          >=0)^(opposite)){return "envious"       ;}else{return "generous"              ;}}
    getAdjTextsloth         (opposite = false){if((this.sloth         >=0)^(opposite)){return "slothful"      ;}else{return "hard-working"          ;}}
    
    getAdjText(num, opposite = false){
        let text = "";
        switch(num){
            case int_altruism      : text = this.getAdjTextaltruism        (opposite); break;
            case int_lawfulness    : text = this.getAdjTextlawfulness      (opposite); break;
            case int_honor         : text = this.getAdjTexthonor           (opposite); break;
            case int_introversion  : text = this.getAdjTextintroversion    (opposite); break;
            case int_creativity    : text = this.getAdjTextcreativity      (opposite); break;
            case int_loyalty       : text = this.getAdjTextloyalty         (opposite); break;
            case int_optimism      : text = this.getAdjTextoptimism        (opposite); break;
            case int_intelligence  : text = this.getAdjTextintelligence    (opposite); break;
            case int_attractiveness: text = this.getAdjTextattractiveness  (opposite); break;
            case int_fortitude     : text = this.getAdjTextfortitude       (opposite); break;
            case int_wisdom        : text = this.getAdjTextwisdom          (opposite); break;
            case int_charisma      : text = this.getAdjTextcharisma        (opposite); break;
            case int_strength      : text = this.getAdjTextstrength        (opposite); break;
            case int_dexterity     : text = this.getAdjTextdexterity       (opposite); break;
            case int_agility       : text = this.getAdjTextagility         (opposite); break;
            case int_sanity        : text = this.getAdjTextsanity          (opposite); break;
            case int_willpower     : text = this.getAdjTextwillpower       (opposite); break;
            case int_religiousness : text = this.getAdjTextreligiousness   (opposite); break;
            case int_pride         : text = this.getAdjTextpride           (opposite); break;
            case int_wrath         : text = this.getAdjTextwrath           (opposite); break;
            case int_lust          : text = this.getAdjTextlust            (opposite); break;
            case int_gluttony      : text = this.getAdjTextgluttony        (opposite); break;
            case int_envy          : text = this.getAdjTextenvy            (opposite); break;
            case int_sloth         : text = this.getAdjTextsloth           (opposite); break;
        }
        return text;
    }
    //#endregion
    //#region Defining Characteristic(s) getters
    getDefiningCharacteristicAdj(){
        let max = 0;
        let maxC = "";
        if(Math.abs(this.altruism      )>max){max = this.altruism      ; maxC = this.getAdjText(int_altruism)           };
        if(Math.abs(this.lawfulness    )>max){max = this.lawfulness    ; maxC = this.getAdjText(int_lawfulness)         };
        if(Math.abs(this.honor         )>max){max = this.honor         ; maxC = this.getAdjText(int_honor)              };
        if(Math.abs(this.introversion  )>max){max = this.introversion  ; maxC = this.getAdjText(int_introversion)       };
        if(Math.abs(this.creativity    )>max){max = this.creativity    ; maxC = this.getAdjText(int_creativity)         };
        if(Math.abs(this.loyalty       )>max){max = this.loyalty       ; maxC = this.getAdjText(int_loyalty)            };
        if(Math.abs(this.optimism      )>max){max = this.optimism      ; maxC = this.getAdjText(int_optimism)           };
        if(Math.abs(this.intelligence  )>max){max = this.intelligence  ; maxC = this.getAdjText(int_intelligence)       };
        if(Math.abs(this.attractiveness)>max){max = this.attractiveness; maxC = this.getAdjText(int_attractiveness)     };
        if(Math.abs(this.fortitude     )>max){max = this.fortitude     ; maxC = this.getAdjText(int_fortitude)          };
        if(Math.abs(this.wisdom        )>max){max = this.wisdom        ; maxC = this.getAdjText(int_wisdom)             };
        if(Math.abs(this.charisma      )>max){max = this.charisma      ; maxC = this.getAdjText(int_charisma)           };
        if(Math.abs(this.strength      )>max){max = this.strength      ; maxC = this.getAdjText(int_strength)           };
        if(Math.abs(this.dexterity     )>max){max = this.dexterity     ; maxC = this.getAdjText(int_dexterity)          };
        if(Math.abs(this.agility       )>max){max = this.agility       ; maxC = this.getAdjText(int_agility)            };
        if(Math.abs(this.sanity        )>max){max = this.sanity        ; maxC = this.getAdjText(int_sanity)             };
        if(Math.abs(this.willpower     )>max){max = this.willpower     ; maxC = this.getAdjText(int_willpower)          };
        if(Math.abs(this.religiousness )>max){max = this.religiousness ; maxC = this.getAdjText(int_religiousness)      };
        if(Math.abs(this.pride         )>max){max = this.pride         ; maxC = this.getAdjText(int_pride               )}
        if(Math.abs(this.wrath         )>max){max = this.wrath         ; maxC = this.getAdjText(int_wrath               )}
        if(Math.abs(this.lust          )>max){max = this.lust          ; maxC = this.getAdjText(int_lust                )}
        if(Math.abs(this.gluttony      )>max){max = this.gluttony      ; maxC = this.getAdjText(int_gluttony            )}
        if(Math.abs(this.envy          )>max){max = this.envy          ; maxC = this.getAdjText(int_envy                )}
        if(Math.abs(this.sloth         )>max){max = this.sloth         ; maxC = this.getAdjText(int_sloth               )}
        return maxC;
    }
    getDefiningCharacteristic(){
        let max = 0;
        let maxC = "";
        if(Math.abs(this.altruism      )>max){max = this.altruism      ; maxC = this.getTextaltruism()           };
        if(Math.abs(this.lawfulness    )>max){max = this.lawfulness    ; maxC = this.getTextlawfulness()         };
        if(Math.abs(this.honor         )>max){max = this.honor         ; maxC = this.getTexthonor()              };
        if(Math.abs(this.introversion  )>max){max = this.introversion  ; maxC = this.getTextintroversion()       };
        if(Math.abs(this.creativity    )>max){max = this.creativity    ; maxC = this.getTextcreativity()         };
        if(Math.abs(this.loyalty       )>max){max = this.loyalty       ; maxC = this.getTextloyalty()            };
        if(Math.abs(this.optimism      )>max){max = this.optimism      ; maxC = this.getTextoptimism()           };
        if(Math.abs(this.intelligence  )>max){max = this.intelligence  ; maxC = this.getTextintelligence()       };
        if(Math.abs(this.attractiveness)>max){max = this.attractiveness; maxC = this.getTextattractiveness()     };
        if(Math.abs(this.fortitude     )>max){max = this.fortitude     ; maxC = this.getTextfortitude()          };
        if(Math.abs(this.wisdom        )>max){max = this.wisdom        ; maxC = this.getTextwisdom()             };
        if(Math.abs(this.charisma      )>max){max = this.charisma      ; maxC = this.getTextcharisma()           };
        if(Math.abs(this.strength      )>max){max = this.strength      ; maxC = this.getTextstrength()           };
        if(Math.abs(this.dexterity     )>max){max = this.dexterity     ; maxC = this.getTextdexterity()          };
        if(Math.abs(this.agility       )>max){max = this.agility       ; maxC = this.getTextagility()            };
        if(Math.abs(this.sanity        )>max){max = this.sanity        ; maxC = this.getTextsanity()             };
        if(Math.abs(this.willpower     )>max){max = this.willpower     ; maxC = this.getTextwillpower()          };
        if(Math.abs(this.religiousness )>max){max = this.religiousness ; maxC = this.getTextreligiousness()      };
        if(Math.abs(this.pride         )>max){max = this.pride         ; maxC = this.getTextpride                ();};
        if(Math.abs(this.wrath         )>max){max = this.wrath         ; maxC = this.getTextwrath                ();};
        if(Math.abs(this.lust          )>max){max = this.lust          ; maxC = this.getTextlust                 ();};
        if(Math.abs(this.gluttony      )>max){max = this.gluttony      ; maxC = this.getTextgluttony             ();};
        if(Math.abs(this.envy          )>max){max = this.envy          ; maxC = this.getTextenvy                 ();};
        if(Math.abs(this.sloth         )>max){max = this.sloth         ; maxC = this.getTextsloth                ();};
        return maxC;
    }
    getDefiningCharacteristics(){
        let characteristicsList = [];
        if(Math.abs(this.altruism      )>50){characteristicsList.push(this.getTextaltruism()           )};
        if(Math.abs(this.lawfulness    )>50){characteristicsList.push(this.getTextlawfulness()         )};
        if(Math.abs(this.honor         )>50){characteristicsList.push(this.getTexthonor()              )};
        if(Math.abs(this.introversion  )>50){characteristicsList.push(this.getTextintroversion()       )};
        if(Math.abs(this.creativity    )>50){characteristicsList.push(this.getTextcreativity()         )};
        if(Math.abs(this.loyalty       )>50){characteristicsList.push(this.getTextloyalty()            )};
        if(Math.abs(this.optimism      )>50){characteristicsList.push(this.getTextoptimism()           )};
        if(Math.abs(this.intelligence  )>50){characteristicsList.push(this.getTextintelligence()       )};
        if(Math.abs(this.attractiveness)>50){characteristicsList.push(this.getTextattractiveness()     )};
        if(Math.abs(this.fortitude     )>50){characteristicsList.push(this.getTextfortitude()          )};
        if(Math.abs(this.wisdom        )>50){characteristicsList.push(this.getTextwisdom()             )};
        if(Math.abs(this.charisma      )>50){characteristicsList.push(this.getTextcharisma()           )};
        if(Math.abs(this.strength      )>50){characteristicsList.push(this.getTextstrength()           )};
        if(Math.abs(this.dexterity     )>50){characteristicsList.push(this.getTextdexterity()          )};
        if(Math.abs(this.agility       )>50){characteristicsList.push(this.getTextagility()            )};
        if(Math.abs(this.sanity        )>50){characteristicsList.push(this.getTextsanity()             )};
        if(Math.abs(this.willpower     )>50){characteristicsList.push(this.getTextwillpower()          )};
        if(Math.abs(this.religiousness )>50){characteristicsList.push(this.getTextreligiousness()      )};
        if(Math.abs(this.pride         )>50){characteristicsList.push(this.getTextpride                ());};
        if(Math.abs(this.wrath         )>50){characteristicsList.push(this.getTextwrath                ());};
        if(Math.abs(this.lust          )>50){characteristicsList.push(this.getTextlust                 ());};
        if(Math.abs(this.gluttony      )>50){characteristicsList.push(this.getTextgluttony             ());};
        if(Math.abs(this.envy          )>50){characteristicsList.push(this.getTextenvy                 ());};
        if(Math.abs(this.sloth         )>50){characteristicsList.push(this.getTextsloth                ());};
        let chas = "";
        if(characteristicsList.length==2){
            chas = characteristicsList[0] + " and " + characteristicsList[1];
        }else{
            chas = characteristicsList[0];
            for(let i = 1; i < characteristicsList.length-1; i++){
                chas = chas + ", " + characteristicsList[i];
            }
            chas = chas + ", and " + characteristicsList[characteristicsList.length-1];
        }
        return chas;
    }
    //#endregion
    //#region Get words that differ by character, like pronouns and to be verbs
    getToBe(){
        if(this.getSexuality==queer){
            return "are";
        }else{
            return "is";
        }
    }
    getPronounObject(){//him
        if(this.getSexuality==queer){
            return "them";
        }
        if(this.sex>1){
            return "him";
        }else{
            return "her";
        }
    }
    getPronounReflexive(){//himself
        if(this.getSexuality==queer){
            return "themself";
        }
        if(this.sex>1){
            return "himself";
        }else{
            return "herself";
        }
    }
    getPronounPossessive(){//his
        if(this.getSexuality==queer){
            return "their";
        }
        if(this.sex>1){
            return "his";
        }else{
            return "her";
        }
    }
    getPronoun(){//he
        if(this.getSexuality==queer){
            return "they";
        }
        if(this.sex>1){
            return "he";
        }else{
            return "she";
        }
    }
    getCapitalizedPronoun(){//He
        if(this.getSexuality==queer){
            return "They";
        }
        if(this.sex>1){
            return "He";
        }else{
            return "She";
        }
    }
    getCapitalizedPronounPossessive(){//his
        if(this.getSexuality==queer){
            return "Their";
        }
        if(this.sex>1){
            return "His";
        }else{
            return "Her";
        }
    }
    //#endregion
    //#region Setters and getters for character trait arrays (hobbies, habits, fears, flaws)
    setHobbies(){
        let numHobbies = Math.floor(random(100, 1)/80)+1;
        for(let i = 0; i < numHobbies; i++){
            let hobbie = Math.floor(Math.random()*listHobbies.length);
            this.hobbies.push(hobbie);
        }
    }
    getHobbiesText(){
        let text = "";
        for(let i = 0; i < this.hobbies.length; i++){
            text = text + listHobbies[this.hobbies[i]];
            if(i<this.hobbies.length-1){
                text = text + ", "
            }
        }
        return text;
    }
    setHabits(){
        let numHabits = Math.floor(random(100, 1)/80)+1;
        for(let i = 0; i < numHabits; i++){
            let habit = Math.floor(Math.random()*listHabits.length);
            this.habits.push(habit);
        }
    }
    getHabitsText(){
        let text = "";
        for(let i = 0; i < this.habits.length; i++){
            text = text + listHabits[this.habits[i]];
            if(i<this.habits.length-1){
                text = text + ", "
            }
        }
        return text;
    }
    setFlaws(){
        let numFlaws = Math.floor(random(100, 1)/80)+1;
        for(let i = 0; i < numFlaws; i++){
            let flaw = Math.floor(Math.random()*listMundaneFlaws.length);
            this.flaws.push(flaw);
        }
    }
    getFlawsText(){
        let text = "";
        for(let i = 0; i < this.flaws.length; i++){
            text = text + listMundaneFlaws[this.flaws[i]];
            if(i<this.flaws.length-1){
                text = text + ", "
            }
        }
        return text;
    }
    setFears(){
        let numFears = Math.floor(((bellCurveTraitGeneration()+100)/60)-(this.willpower/40)+1);
        for(let i = 0; i < numFears; i++){
            let fear = Math.floor(Math.random()*listFears.length);
            if(listFears[fear]=="Being a bad person"&&this.altruism<-33){
                i--;
            }else{
                this.fears.push(fear);
            }
        }
    }
    getFearsText(){
        let text = "";
        for(let i = 0; i < this.fears.length; i++){
            text = text + listFears[this.fears[i]];
            if(i<this.fears.length-1){
                text = text + ", "
            }
        }
        return text;
    }
    //#endregion
    //#region Getters for sex, sexuality, and alignment
    getSex(){
        let s = "";
        if(this.getSexuality==queer){
            return "Other";
        }
        if(this.trans){
            s = "Trans "
        }else{
            s = "Cis "
        }
        if(this.sex>1){
            s = s + "Man"
        }else{
            s = s + "Woman"
        }
        return s;
    }
    getSexuality(){
        let gayPercent = getLGBTQIAPercent();
        if(this.sexuality>gayPercent){
            return straight;
        }else{
            let weightedSexuality = this.sexuality/gayPercent*100;
            if(weightedSexuality<55){
                return bisexual;
            }else if(weightedSexuality<90){
                return gay;
            }else if(weightedSexuality<95){
                return ace;
            }else{
                return queer;
            }
        }
    }
    alignment(){
        let alg = "";
        if(this.lawfulness>33){
            alg = "Lawful ";
        }else if(this.lawfulness<-33){
            alg = "Chaotic "
        }else{
            if(this.altruism<=33&&this.altruism>=-33){
                alg = "True Neutral";
            }else{
                alg = "Neutral "
            }
        }
        if(this.altruism>33){
            alg = alg + "Good";
        }else if(this.altruism<-33){
            alg = alg + "Evil";
        }else{
            if(alg=="True Neutral"){

            }else{
                alg = alg + "Neutral";
            }
        }
        return alg;
    }
    //#endregion
}

function sexualityToString(value){
    switch(value){
        case straight: return "Straight";
        case gay: return "Gay";
        case bisexual: return "Bisexual";
        case ace: return "Asexual";
        case queer: return "Queer";
        default: return "Error";
    }

}
let color1 = "#000000";
let color2 = "#0f0f0f";
switcher.addEventListener('click', function () {
    document.body.classList.toggle('dark-theme')

    var className = document.body.className;
    if (this.textContent == "Light Mode") {
        this.textContent = "Dark Mode";
        color1 = "#000000";
        color2 = "#0f0f0f";
    }
    else {
        this.textContent = "Light Mode";
        color1 = "#ffffff";
        color2 = "#c2c2c2";
    }

    console.log('current class name: ' + className);

});

const divArray = [];
function addBlockOfText(div, text) {
    let divElementP = document.createElement("p")
    let divElementText = document.createTextNode(text);
    divElementP.appendChild(divElementText);
    div.appendChild(divElementP);
    
}

function addBlockOfText(div, text, classN) {
    let divElementP = document.createElement("p");
    divElementP.className = classN;
    let divElementText = document.createTextNode(text);
    //divElementText.className = classN;
    divElementP.appendChild(divElementText);
    div.appendChild(divElementP);
    
}

function addCharacterRelations(characterArray){

}

function removeSmallestAbsoluteValueElementArray(numArray){
    //console.log("Array contents"+numArray);
    let min = Math.abs(numArray[0]);
    let minInd = 0;
    let returnArray = [];
    for(let i = 1; i < numArray.length; i++){
        if(Math.abs(numArray[i])<min){
            min = Math.abs(numArray[i]);
            returnArray.push(numArray[minInd]);
            minInd = i;
        }else{
            returnArray.push(numArray[i]);
        }
    }
    //console.log("Minimum value:"+min);
    //console.log("Index of minimum value:"+minInd);
    return returnArray;
}
let charArray = [];
function createCharacters(num){
    for (let i = 0; i < num; i++) {
        charArray[i] = new Character(i+1);
    }
}
function displayCharacters(num){
    for (let i = 0; i < num; i++) {
        // create div element
        let divElement = document.createElement('div');
        if(i%2==0){
            divElement.style.backgroundColor = color1;
        }else{
            divElement.style.backgroundColor = color2;
        }
        
        divArray[i] = divElement;
        addBlockOfText(divElement, "------------------------------------");
        addBlockOfText(divElement, "Character Number "+charArray[i].number);
        addBlockOfText(divElement, "Alignment: " + charArray[i].alignment());
        addBlockOfText(divElement, "Sex: " + charArray[i].getSex());
        addBlockOfText(divElement, "Sexuality: "+sexualityToString(charArray[i].getSexuality()));
        addBlockOfText(divElement, "Fear(s): "+charArray[i].getFearsText());
        addBlockOfText(divElement, "Flaw(s): "+charArray[i].getFlawsText());
        addBlockOfText(divElement, "Habit(s): "+charArray[i].getHabitsText());
        addBlockOfText(divElement, "Hobby: "+charArray[i].getHobbiesText());
        addBlockOfText(divElement, "Personal Details:");
        addBlockOfText(divElement, charArray[i].getCharacterDescription());




        if(debug){
            addBlockOfText(divElement, "Debug Info:", "customDebug");
            let charDataArray = charArray[i].getCharacterArray();
            let charDataArrayDescription = charArray[i].getCharacterArrayDescription();
            let charDataText = "";
            for(let i = 0; i < charDataArray.length; i++){
                charDataText = charDataText + charDataArrayDescription[i] + charDataArray[i];
            }
            addBlockOfText(divElement, charDataText, "customDebug");
        }
        //addBlockOfText(divElement, 
        addBlockOfText(divElement, "------------------------------------");

        // append div element to document
        document.body.appendChild(divElement);
    }
}
function generateCharacters() {
    var num = parseInt(numberField.value);
    for (let i = 0; i < divArray.length; i++) {
        divArray[i].remove();
    }
    /*let traits = [];
    let numRuns = 100000;
    for(let i = 0; i < numRuns; i ++){
        traits.push(bellCurveTraitGeneration());
    }
    /*for(let i = 0; i < numRuns*0.66; i++){
        traits = removeSmallestAbsoluteValueElementArray(traits);
    }
    let str = traits[0];
    for(let i = 1; i < traits.length; i++){
        if(i%100==0){
            str = str + " " + traits[i];
        }else{
            str = str + "," + traits[i];
        }
        
    }
    let divElementTest = document.createElement('div');
    addBlockOfText(divElementTest, str);
    document.body.appendChild(divElementTest);*/
    if(document.getElementById('specialGeneration').checked){
        if(!debug){
            debugFunc();
        }
        console.log("Special Generation");
        num = 1;
        charArray[0] = new Character(1);
        while(charArray[0].intelligence<66||charArray[0].pride<33){
            charArray[0] = new Character(1);
        }
        displayCharacters(num);
    }else if (num > 20 || num < 1) {
        let divElement = document.createElement('div');
        divArray[0] = divElement;
        addBlockOfText(divElement, "Please Enter A Valid Group Size (Greater than 0 and less than 20)");

        document.body.appendChild(divElement);
    } else {
        console.log("Normal Generation");
        createCharacters(num);
        displayCharacters(num);
    }
}
function debugFunc(){
    console.log("debugFunc");
    if(debug){
        if(divArray.length==0){
            console.log("debugFunc: divArray length is zero");
            debugLable.textContent = "Show debug";
            debug = false;
            return;
        }
        /*var paras = document.getElementsByClassName('customDebug');

        while(paras[0]) {
            paras[0].parentNode.removeChild(paras[0]);
        }​*/
        var paras = document.getElementsByClassName("customDebug");
        while(paras[0]){
            paras[0].parentNode.removeChild(paras[0]);
        }
        debugLable.textContent = "Show debug";
        debug = false;
    }else{
        console.log("debugFunc: debug Not already set");
        for (let i = 0; i < divArray.length; i++) {
            addBlockOfText(divArray[i], "Debug Info:", "customDebug");
            let charDataArray = charArray[i].getCharacterArray();
            let charDataArrayDescription = charArray[i].getCharacterArrayDescription();
            let charDataText = "";
            for(let i = 0; i < charDataArray.length; i++){
                charDataText = charDataText + charDataArrayDescription[i] + charDataArray[i];
            }
            addBlockOfText(divArray[i], charDataText, "customDebug");
            addBlockOfText(divArray[i], "------------------------------------------------------------------------", "customDebug");
        }
        debugLable.textContent = "Hide debug";
        debug = true;
    }
}
generateButton.addEventListener('click', function () {
    generateCharacters();
});

debugButton.addEventListener('click', function() {
    console.log("Debug Click");
    debugFunc();
});

